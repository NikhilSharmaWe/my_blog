{
  
    
        "post0": {
            "title": "Automatic Spam Detection",
            "content": "import pandas as pd . # First import the data set and rename the columns df = pd.read_table(&#39;/content/SMSSpamCollection&#39;, sep=&#39; t&#39;, names=[&#39;label&#39;,&#39;sms&#39;]) # Lets see the first 5 rows df.head() . label sms . 0 ham | Go until jurong point, crazy.. Available only ... | . 1 ham | Ok lar... Joking wif u oni... | . 2 spam | Free entry in 2 a wkly comp to win FA Cup fina... | . 3 ham | U dun say so early hor... U c already then say... | . 4 ham | Nah I don&#39;t think he goes to usf, he lives aro... | . Data Preprocessing . Since scikit-learn can only have numerical values as inputs . Lets turn our labels to binary variables. i.e. 0 to represent ‘ham’ and 1 to represent ‘spam’ . df[&#39;label&#39;] = df.label.map({&#39;ham&#39;:0, &#39;spam&#39;:1}) . Now lets split the dataset in Training and Testing Sets . X_train is the training data for the &#39;sms&#39; column | y_train is the training data for the &#39;label&#39; column | X_test is the testing data for the &#39;sms&#39; column. | y_test is the testing data for the &#39;label&#39; column | . from sklearn.model_selection import train_test_split X_train, X_test, y_train, y_test = train_test_split(df[&#39;sms&#39;], df[&#39;label&#39;], random_state=1) print(&#39;Number of rows in the total set: {}&#39;.format(df.shape[0])) print(&#39;Number of rows in the training set: {}&#39;.format(X_train.shape[0])) print(&#39;Number of rows in the test set: {}&#39;.format(X_test.shape[0])) . Number of rows in the total set: 5572 Number of rows in the training set: 4179 Number of rows in the test set: 1393 . Now we apply Bag of Words(BoW) to our datasets . from sklearn.feature_extraction.text import CountVectorizer # Instantiate the CountVectorizer method count_vector = CountVectorizer() # Fit the training data and then return the matrix training_data = count_vector.fit_transform(X_train) # Transform testing data and return the matrix. testing_data = count_vector.transform(X_test) . Using Multinomial Naive Bayes to train our model . from sklearn.naive_bayes import MultinomialNB naive_bayes = MultinomialNB() naive_bayes.fit(training_data, y_train) predictions = naive_bayes.predict(testing_data) . Model Evaluation . Accuracy: Measures how often the classifier makes the correct prediction. It’s the ratio of the number of correct predictions to the total number of predictions (the number of test data points) . | Precision: Tells us what proportion of messages we classified as spam, actually were spam. It is a ratio of true positives(words classified as spam, and which are actually spam) to all positives(all words classified as spam, irrespective of whether that was the correct classification). . | Recall(sensitivity): Tells us what proportion of messages that actually were spam were classified by us as spam. It is a ratio of true positives(words classified as spam, and which are actually spam) to all the words that were actually spam. . | F1 score: It is weighted average of the precision and recall scores. This score can range from 0 to 1, with 1 being the best possible F1 score . | . from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score print(&#39;Accuracy score: &#39;, format(accuracy_score(y_test, predictions))) print(&#39;Precision score: &#39;, format(precision_score(y_test, predictions))) print(&#39;Recall score: &#39;, format(recall_score(y_test, predictions))) print(&#39;F1 score: &#39;, format(f1_score(y_test, predictions))) . Accuracy score: 0.9885139985642498 Precision score: 0.9720670391061452 Recall score: 0.9405405405405406 F1 score: 0.9560439560439562 . For all 4 metrics used above the values can range from 0 to 1 . Having a score as close to 1 as possible is a good indicator of how well our model is doing .",
            "url": "https://smaranjitghose.github.io/my_blog/jupyter/2020/04/19/post-1.html",
            "relUrl": "/jupyter/2020/04/19/post-1.html",
            "date": " • Apr 19, 2020"
        }
        
    
  

  
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page9": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://smaranjitghose.github.io/my_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}